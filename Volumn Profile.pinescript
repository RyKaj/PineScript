//@version=5

//=============================================================================================  
//  Creator: Woverine
//	
//	Source Code: https://github.com/RyKaj/PineScript/tree/main
//  Reference:  https://www.youtube.com/watch?v=IMj6aIs26UE&ab_channel=WheelOptionsTraders
//	Purpose: 
//		  Show -2, -1, 0, +1 +2 Standard Deviation
//
//=============================================================================================  

indicator("Woverine - Standard Deviation", shorttitle="Standard Deviation", overlay=true)

// Plot colors
// https://chir.ag/projects/name-that-color/#6195ED
// https://kodify.net/tradingview/colours/basic-colours/
// color colorAquaIsland = #B2DFDB
// color colorAzureRadiance = #0094ff
    // color colorBlack = #363A45
// color colorBlazeOrange = #ff6a00
color colorBlue = #2196F3
// color colorBlueChill = #088A8D
// color colorBlushPink = #fd7fe6
// color colorBurntSienna = #EF5350
// color colorCandelLight = #FCD917
// color colorCoral = #FF7F50
// color colorCyan = #17FFFF
// color colorDeathCross = #e32636
// color colorFreshEggplant = #800080
// color colorFuchsia = #E040FB
// color colorGoldenCross = #61ed77
color colorGray = #787B86
// color colorJapaneseLaurel = #008000
color colorGreen = #4CAF50
// color colorJungleGreen = #39ff14
// color colorKeyLimePie = #BCBB26
// color colorLilacBush = #9575cd
    // color colorLime = #00E676
// color colorOrange = #FF9800
// color colorParsley = #0E4813
// color colorPastelPink = #FFCDD2
color colorPurple = #9C27B0
color colorRed = #FF5252
// color colorRobinEggBlue = #00C9C9
// color colorRoseBudCherry = #880e4f
// color colorRusticRed = #4E0404
// color colorSaratoga = #505010
// color colorSpringGreen = #00E676
// color colorStarship = #F2F131
// color colorTamarillo = #991515
// color colorTeal = #00897B
// color colorTealBlue = #055355
// color colorTrendyGreen = #86851b
color colorWhite = #FFFFFF


// 128 = 4 months
int length = input.int(128, title="Length", minval = 1, maxval = 5000 )
//length = input.int(defval = 128, title = "Length 1", options = [ ,  ,  ,  ], tooltip = "", inline = " ", group =""  , confirm = false ) 

float src = input.source( defval = close, title = "Source", tooltip = "", inline = "", group = "Channel" ) 

string col_Diviation_group = "DeviationGroup"

bool upprinp2 = input.bool( true, title="Upper Deviation +2", group = col_Diviation_group, inline = "", confirm = false )
string upprinp2StyleOption = input.string( defval = "dashed (╌)", title="Line Style", options=["solid (─)", "dotted (┈)", "dashed (╌)", "arrow left (←)", "arrow right (→)", "arrows both (↔)" ], group = col_Diviation_group, inline = "", confirm = false)

bool upprinp = input.bool( true, title="Upper Deviation +1", group = col_Diviation_group, inline = "", confirm = false )
string upprinpStyleOption = input.string( defval = "dashed (╌)", title="Line Style", options=["solid (─)", "dotted (┈)", "dashed (╌)", "arrow left (←)", "arrow right (→)", "arrows both (↔)" ], group = col_Diviation_group, inline = "", confirm = false)

float upprmltinp = input.float( 1.0, title="",  group = col_Diviation_group, inline = "", confirm = false )
bool  lwrinp = input.bool( true, title="Lower Deviation -1", group = col_Diviation_group,  inline = "", confirm = false )

string lwrinpStyleOption = input.string( defval = "dashed (╌)", title="Line Style", options=["solid (─)", "dotted (┈)", "dashed (╌)", "arrow left (←)", "arrow right (→)", "arrows both (↔)" ], group = col_Diviation_group, inline = "", confirm = false)
float lwrMultInput = input.float( 1.0, title="", group = col_Diviation_group, inline = "",  confirm = false )
float upprmltinp2 = input.float( 2.0, title="", group = col_Diviation_group, inline = "", confirm = false )

bool lwrinp2 = input.bool( true, title="Lower Deviation -2", group = col_Diviation_group,  inline = "", confirm = false )
string lwrinp2StyleOption = input.string( defval = "dashed (╌)", title="Line Style", options=["solid (─)", "dotted (┈)", "dashed (╌)", "arrow left (←)", "arrow right (→)", "arrows both (↔)" ], group = col_Diviation_group, inline = "", confirm = false)
float lwrmultinp = input.float( 2.0, title="", group = col_Diviation_group, inline = "", confirm = false )


// Standard Deviation Colours
string col_settings_group = "Color Settings"
color colSDPlus2 = input.color( color.new( colorPurple, 95 ) , title = "+2 SD", tooltip = "", inline = "", group = col_settings_group , confirm = false ) 
color colSDPlus1 = input.color(  color.new( colorGreen, 95 ) , title = "+1 SD", tooltip = "", inline = "", group = col_settings_group, confirm = false ) 
color colSD0 = input.color( color.new( colorGray, 95 ) , title = "0 SD", tooltip = "", inline = "", group = col_settings_group , confirm = false )
color colSDNeg1 = input.color( color.new( colorBlue, 95 ) , title = "-1 SD", tooltip = "", inline = "", group = col_settings_group , confirm = false )
color colSDNeg2 = input.color( color.new( colorRed, 95 ) , title = "-2 SD", tooltip = "", inline = "", group = col_settings_group , confirm = false ) 


visual_settings_group = "Visual Settings"

// Pearson Correlation Coefficient (r)
// The Pearson correlation coefficient (r) is the most common way of measuring a linear correlation. 
// It is a number between –1 and 1 that measures the strength and direction of the relationship between two variables.
bool prinp = input.bool( true, "Show  Pearson Correlation R", group = visual_settings_group )          

bool extLeft = input.bool( true, "Extend Lines Left", group = visual_settings_group )
bool extRight = input.bool( true, "Extend Lines Right", group = visual_settings_group )

string exs = switch
    extLeft and extRight => extend.both
    extLeft => extend.left
    extRight => extend.right
    => extend.none

slpclc(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]
        
[s, a, i] = slpclc(src, length)

float st_price = i + s * ( length - 1 )

float end_price = i

line base_line = na
if na(base_line) and not na( st_price )
    base_line := line.new( bar_index - length + 1, st_price, bar_index, end_price, width=1, extend=exs, style = line.style_dashed, color = color.new( colSD0, 0 ) )
else
    line.set_xy1( base_line, bar_index - length + 1, st_price )
    line.set_xy2( base_line, bar_index, end_price )
    na
    
devcalc(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt( stdDevAcc / ( periods == 0 ? 1 : periods ) )
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt( dsxx * dsyy )
    [stdDev, pearsonR, upDev, dnDev]

devcalc2(source, length, slope, average, intercept) =>
    upDev2 = 0.0
    dnDev2 = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev2
            upDev2 := price
        price := val - low[j]
        if price > dnDev2
            dnDev2 := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev2 = math.sqrt( stdDevAcc / ( periods == 0 ? 1 : periods ) )
    pearsonR2 = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt( dsxx * dsyy )
    [stdDev2, pearsonR2, upDev2, dnDev2]

//-------------------------------------------------------------------------
// +1 & -1
//-------------------------------------------------------------------------
[stdDev, pearsonR, upDev, dnDev] = devcalc(src, length, s, a, i)
upprst_price = st_price + ( upprinp ? upprmltinp * stdDev : upDev )
upprend_price = end_price + ( upprinp ? upprmltinp * stdDev : upDev )
var line uppr = na
lwrst_price = st_price + ( lwrinp ? -lwrMultInput * stdDev : -dnDev )
lwrend_price = end_price + ( lwrinp ? -lwrMultInput * stdDev : -dnDev )
var line lwr = na

upprinpLineStyle = ( upprinpStyleOption == "dotted (┈)") ? line.style_dotted :
     ( upprinpStyleOption == "dashed (╌)") ? line.style_dashed :
     ( upprinpStyleOption == "arrow left (←)") ? line.style_arrow_left :
     ( upprinpStyleOption == "arrow right (→)") ? line.style_arrow_right :
     ( upprinpStyleOption == "arrows both (↔)") ? line.style_arrow_both :
         line.style_dashed

lwrinpLineStyle = ( lwrinpStyleOption == "dotted (┈)") ? line.style_dotted :
     ( lwrinpStyleOption == "dashed (╌)") ? line.style_dashed :
     ( lwrinpStyleOption == "arrow left (←)") ? line.style_arrow_left :
     ( lwrinpStyleOption == "arrow right (→)") ? line.style_arrow_right :
     ( lwrinpStyleOption == "arrows both (↔)") ? line.style_arrow_both :
         line.style_dashed


if na(uppr) and not na(upprst_price)
    uppr := line.new( bar_index - length + 1, upprst_price, bar_index, upprend_price, width=1, style = upprinpLineStyle, extend = exs, color = color.new( colSDPlus1, 0) )
else
    line.set_xy1(uppr, bar_index - length + 1, upprst_price)
    line.set_xy2(uppr, bar_index, upprend_price)
    na
if na(lwr) and not na(lwrst_price)
    lwr := line.new( bar_index - length + 1, lwrst_price, bar_index, lwrend_price, width=1, style = lwrinpLineStyle, extend = exs, color = color.new( colSDNeg1, 0) )
else
    line.set_xy1( lwr, bar_index - length + 1, lwrst_price )
    line.set_xy2( lwr, bar_index, lwrend_price )
    na
linefill.new( uppr, base_line, color = colSDPlus1 )
linefill.new( base_line, lwr, color = colSDNeg1 )

//-------------------------------------------------------------------------
// +2 & -2
//-------------------------------------------------------------------------
[stdDev2, pearsonR2, upDev2, dnDev2] = devcalc2(src, length, s, a, i )
upprst_price2 = st_price + ( upprinp2 ? upprmltinp2 * stdDev2 : upDev2 )
upprend_price2 = end_price + ( upprinp2 ? upprmltinp2 * stdDev2 : upDev2 )
var line uppr2 = na
lwrst_price2 = st_price + ( lwrinp2 ? -lwrmultinp * stdDev2 : -dnDev2 )
lwrend_price2 = end_price + ( lwrinp2 ? -lwrmultinp * stdDev2 : -dnDev2 )
var line lwr2 = na

upprinp2LineStyle = ( upprinp2StyleOption == "dotted (┈)") ? line.style_dotted :
     ( upprinp2StyleOption == "dashed (╌)") ? line.style_dashed :
     ( upprinp2StyleOption == "arrow left (←)") ? line.style_arrow_left :
     ( upprinp2StyleOption == "arrow right (→)") ? line.style_arrow_right :
     ( upprinp2StyleOption == "arrows both (↔)") ? line.style_arrow_both :
         line.style_dashed

lwrinp2LineStyle = ( lwrinp2StyleOption == "dotted (┈)") ? line.style_dotted :
     ( lwrinp2StyleOption == "dashed (╌)") ? line.style_dashed :
     ( lwrinp2StyleOption == "arrow left (←)") ? line.style_arrow_left :
     ( lwrinp2StyleOption == "arrow right (→)") ? line.style_arrow_right :
     ( lwrinp2StyleOption == "arrows both (↔)") ? line.style_arrow_both :
         line.style_dashed         

if na(uppr2) and not na(upprst_price2)
    uppr2 := line.new( bar_index - length + 2, upprst_price2, bar_index, upprend_price2, width=1, style = upprinp2LineStyle, extend=exs, color=color.new( colSDPlus2, 0 ) )
else
    line.set_xy1( uppr2, bar_index - length + 2, upprst_price2)
    line.set_xy2( uppr2, bar_index, upprend_price2)
    na
if na(lwr2) and not na(lwrst_price2)
    lwr2 := line.new( bar_index - length + 2, lwrst_price2, bar_index, lwrend_price2, width=1, style = lwrinp2LineStyle, extend=exs, color=color.new( colSDNeg2, 0 ) )
else
    line.set_xy1( lwr2, bar_index - length + 2, lwrst_price2 )
    line.set_xy2( lwr2, bar_index, lwrend_price2 )
    na

var label r = na
label.delete( r[1] )

if prinp and not na( pearsonR )
    r := label.new( bar_index - length + 1, lwrst_price, str.tostring( pearsonR, "#.################" ), color = color.new( colorWhite, 100), textcolor = color.new( colSDPlus1, 0 ), size = size.normal, style=label.style_label_up )
    
uppr_break = ta.crossover( close, upprend_price )
lwr_break = ta.crossunder( close, lwrend_price )

uppr2_break = ta.crossover( close, upprend_price2 )
lwr2_break = ta.crossunder( close, lwrend_price2 )

alertcondition( uppr_break, title = "Upper Line Break Alert", message = "Upper Line has been break!" )
alertcondition( lwr_break, title = "Lower Line Break Alert", message = "Lower Line has been break!" )

alertcondition( uppr2_break, title = "Upper 2 Line Break Alert", message = "Upper 2 Line has been break!" )
alertcondition( lwr2_break, title = "Lower 2 Line Break Alert", message = "Lower 2 Line has been break!" )
